Please answer the below Data Structure Questions:

why do we need data structure?
Ans: Use of appropriate data structure enables a computer system to perform its task more efficiently, by influencing the ability of computer to store and retrieve data from any location in its memory. Different kind of data structures are suited to different computer applications and tasks.


What are the various operations that can be performed on different Data Structures?
Ans: The most common operations performed on them are:
Data insertion,Data update,Data retrieval.

List out the areas in which data structures are applied extensively?
Ans: Compiler Design,Operating System,Database Management System,Statisticalanalysis package,Numerical Analysis,Graphics,Artificial Intelligence,and Simulation

what is an Array?
Ans: An array, in the context of Java, is a dynamically-created object that serves as a container to hold constant number of values of the same type.


what is the difference between the Array and ArrayList?
Ans: An array is basic functionality provided by Java. ArrayList is part of collection framework in Java. Therefore array members are accessed using [], while ArrayList has a set of methods to access elements and modify them. Array is a fixed size data structure while ArrayList is not.

what is LinkedList?
Ans: LinkedList in Java. Linked List are linear data structures where the elements are not stored in contiguous locations and every element is a separate object with a data part and address part.

How is an Array different from Linked List?
Ans: In array, each element is independent and can be accessed using it's index value. In case of a linked list, each node/element points to the next, previous, or maybe both nodes.

what is queue?
Ans: The Java Queue interface, java.util.Queue represents a data structure designed to have elements inserted at the end of the queue, and elements removed from the beginning of the queue.

what is stack?
Ans: A Stack is a Last In First Out (LIFO) data structure. It supports two basic operations called push and pop. The push operation adds an element at the top of the stack, and the pop operation removes an element from the top of the stack.


what is FIFO and LIFO?
Ans: FIFO is an abbreviation for first in, first out. It is a method for handling data structures where the first element is processed first and the newest element is processed last. ... LIFO is an abbreviation for Last in, first out is same as fist in, last out (FILO).

what is the order of complexity?
Ans: It is a certain mathematical expression of the size of the input, and the algorithm finishes between two factors of it.
Generally, the smaller the order of complexity of the program's underlying algorithm, the faster it will run and the better it will scale as the input gets larger.

what is the best case to search an element from an array?
Ans: The term best-case performance is used in computer science to describe an algorithm's behavior under optimal conditions. For example, the best case for a simple linear search on a list occurs when the desired element is the first element of the list.

what is the worst case to search an element from an array?
Ans: The worst case to search an element is When the desired element is the last element of an array

what is tree in data structure?
Ans: A tree is a non-linear data structure in which data is organized hierarcically. A tree is a collection of entities called nodes.
Nodes are connected by edges. Each node contains a value or data, and it may or may not have a child node .

what is graph in data structure?
Ans:A graph is a nonlinear data structure consisting of nodes and edges.

what is the difference between the HashTable and HashMap?
Ans: It is not-thread safe and can't be shared between many threads without proper synchronization code whereas Hashtable is synchronized. It is thread-safe and can be shared with many threads. 2. HashMap allows one null key and multiple null values whereas Hashtable doesn't allow any null key or value.


What are the major data structures used in the following areas : RDBMS, Network data model and Hierarchical data model.
Ans: RDBMS - Array, Network data model - Graphs and Hierarchical data models use Trees

How HashMap works in java?
Ans: HashMap in Java works on hashing principle. In hashing, hash functions are used to link key and value in HashMap. Hashing is the mechanism of assigning unique code to a variable or attribute using an algorithm to enable easy retrieval.


What is ArrayIndexOutOfBoundsException in java? When it occurs?
Ans:java.lang.ArrayIndexOutOfBoundsException. ArrayIndexOutOfBoundsException is thrown to indicate that we are trying to access array element with an illegal index. This exception is thrown when the index is either negative or greater than or equal to the size of the array.

•
What are the different ways of copying an array into another array?
Ans: Manually. In this method we manually copy elements one by one. ...
•	Arrays.copyOf() We can directly copy one array to another by using Arrays.copyOf() method. ...
•	System.arraycopy() It is another method that directly copies one array to another. ...
•	Object.clone()


What is difference between an array and a linked list?
Ans: The major difference between Array and Linked list regards to their structure. Arrays are index based data structure where each element associated with an index.


What is DFS and BFS?
Ans: DFS stands for Depth First Search. 2. BFS(Breadth First Search) uses Queue data structure for finding the shortest path. DFS(Depth First Search) uses Stack data structure.


What is Recursion?
Ans: Recursion is a basic programming technique you can use in Java, in which a method calls itself to solve some problem.


What are linear and non linear data Structures?
Ans: Examples of linear data structures are Arrays, Stack, Queue and Linked List. An arrays is a collection of data items having the same data types. ... All the data elements in non linear data structure can not be traversed in single run. Examples of non linear data structures are Trees and Graphs.


What is Big-(O)-notation?
Ans: Big-O notation. (definition) Definition: A theoretical measure of the execution of an algorithm, usually the time or memory needed, given the problem size n, which is usually the number of items. Informally, saying some equation f(n) = O(g(n)) means it is less than some constant multiple of g(n).


Outlined different kind of sorting algorithm with time complexity?
Ans: Selection - O(n^2), Bubble - O(n), Insertion - O(n), Heap, Quick and Merge - O(n log(n)), Bucket - O(n+k)

Draw a table with time complexity in which it will summarize all the data structure
feature's advantages and disadvantages.
  a)In terms of Accessing element.
  b)In terms of Inserting element.
  c)In terms of Searching element.
  d)In terms of Removing element.

Ans:
Data Structure	                                    Time Complexity
                                Average	                                         Worst
                    Access	     Search	     Insertion	   Deletion	       Access	   Search	  Insertion	   Deletion
Array	              Θ(1)	      Θ(n)	      Θ(n)	        Θ(n)	        O(1)	    O(n)	   O(n)	        O(n)
Stack	              Θ(n)	      Θ(n)	      Θ(1)	        Θ(1)	        O(n)	    O(n)	   O(1)	        O(1)
Queue	              Θ(n)	      Θ(n)	      Θ(1)	        Θ(1)	        O(n)	    O(n)	   O(1)	        O(1)
Singly-Linked List	  Θ(n)	      Θ(n)	      Θ(1)	        Θ(1)	        O(n)	    O(n)	   O(1)	        O(1)
Doubly-Linked List	  Θ(n)	      Θ(n)	      Θ(1)	        Θ(1)	        O(n)	    O(n)	   O(1)	        O(1)
Skip List	         Θ(log(n))	Θ(log(n))	Θ(log(n))	  Θ(log(n))	        O(n)	    O(n)	   O(n)	        O(n)
Hash Table	          N/A	      Θ(1)	      Θ(1)	        Θ(1)	        N/A     	O(n)	   O(n)	        O(n)
Binary Search Tree	 Θ(log(n))	Θ(log(n))	Θ(log(n))	  Θ(log(n))	        O(n)	    O(n)	   O(n)	        O(n)
Cartesian Tree	      N/A	    Θ(log(n))	Θ(log(n))	  Θ(log(n))	        N/A	        O(n)	   O(n)	        O(n)
B-Tree	             Θ(log(n))	Θ(log(n))	Θ(log(n))	  Θ(log(n))	      O(log(n))	  O(log(n))	 O(log(n))	  O(log(n))
Red-Black Tree	     Θ(log(n))	Θ(log(n))	Θ(log(n))	  Θ(log(n))	      O(log(n))	  O(log(n))	 O(log(n))	  O(log(n))
Splay Tree	          N/A	    Θ(log(n))	Θ(log(n))	  Θ(log(n))	        N/A	      O(log(n))	 O(log(n))	  O(log(n))
AVL Tree	         Θ(log(n))	Θ(log(n))	Θ(log(n))	  Θ(log(n))	      O(log(n))	  O(log(n))	 O(log(n))	  O(log(n))
KD Tree	             Θ(log(n))	Θ(log(n))	Θ(log(n))	  Θ(log(n))	        O(n)	    O(n)	   O(n)	        O(n)



